#include "stddef.gdh"

ExtraAscent  = 250m;
ExtraDescent = 100m;

table(glyph)
  clsInitAlignC  = (U+16F2D, U+16F2E, U+16F35, U+16F36,
                    U+16F08, U+16F09, U+16F2A, U+16F2B,
                    U+16F32, (U+16F37..U+16F39),
                   (U+16F3A..U+16F3E))
    { aboveNormS = point(bb.width/2, bb.top+90m) ;
      aboveTopS  = point(bb.width/2, bb.top+320m) ;
      aboveDescS = point(bb.width/2, bb.top+340m) ;

      belowNormS = point(bb.width/2, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2, bb.bottom-90m) ;
      belowDescS = point(bb.width/2, bb.bottom-70m) } ;

  clsInitAlignL1 = (U+16F16, U+16F17, U+16F19)
    { aboveNormS = point(bb.width/2-50m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2-50m, bb.top+320m) ;
      aboveDescS = point(bb.width/2-50m, bb.top+340m) ;

      belowNormS = point(bb.width/2-50m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2-50m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2-50m, bb.bottom-70m) } ;

  clsInitAlignL2 = (U+16F19, U+16F04, U+16F05, U+16F18)
    { aboveNormS = point(bb.width/2-30m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2-30m, bb.top+320m) ;
      aboveDescS = point(bb.width/2-30m, bb.top+340m) ;

      belowNormS = point(bb.width/2-30m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2-30m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2-30m, bb.bottom-70m) } ;

  clsInitAlignR1 = ((U+16F10..U+16F12),
                    (U+16F2F..U+16F31))
    { aboveNormS = point(bb.width/2+100m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2+100m, bb.top+320m) ;
      aboveDescS = point(bb.width/2+100m, bb.top+340m) ;

      belowNormS = point(bb.width/2+100m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+100m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+100m, bb.bottom-70m) } ;

  clsInitAlignR2 = ((U+16F00..U+16F03),
                    (U+16F1E..U+16F20), U+16F0E)
    { aboveNormS = point(bb.width/2+70m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2+70m, bb.top+320m) ;
      aboveDescS = point(bb.width/2+70m, bb.top+340m) ;

      belowNormS = point(bb.width/2+70m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+70m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+70m, bb.bottom-70m) } ;

  clsInitAlignR3 = (U+16F06, U+16F07, U+16F11,
                    U+16F14, U+16F26, U+16F27,
                    U+16F2C, U+16F33, U+16F41)
    { aboveNormS = point(bb.width/2+50m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2+50m, bb.top+320m) ;
      aboveDescS = point(bb.width/2+50m, bb.top+340m) ;

      belowNormS = point(bb.width/2+50m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+50m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+50m, bb.bottom-70m) } ;

  clsInitAlignR4 = ((U+16F0A..U+16F0F), U+16F13, U+16F15,
                    (U+16F1A..U+16F1D), (U+16F21..U+16F25),
                    U+16F28, U+16F29, U+16F34, U+16F3F,
                    U+16F40, (U+16F42..U+16F44))
    { aboveNormS = point(bb.width/2+30m, bb.top+90m) ;
      aboveTopS  = point(bb.width/2+30m, bb.top+320m) ;
      aboveDescS = point(bb.width/2+30m, bb.top+340m) ;

      belowNormS = point(bb.width/2+30m, bb.bottom-320m) ;
      belowTopS  = point(bb.width/2+30m, bb.bottom-90m) ;
      belowDescS = point(bb.width/2+30m, bb.bottom-70m) } ;

  clsInit = (clsInitAlignC,
             clsInitAlignL1,
             clsInitAlignL2,
             clsInitAlignR1,
             clsInitAlignR2,
             clsInitAlignR3,
             clsInitAlignR4);

  clsInitHiMajKern = ((U+16F16..U+16F1D),
                      U+16F2A, U+16F2B, U+16F3D,
                      U+16F3E, U+16F40, U+16F41)
    { AspHiMajS = point(bb.right-80m, bb.bottom+700m) } ;
  clsInitHiMinKern = (U+16F02)
    { AspHiMinS = point(bb.right-30m, bb.bottom+700m) } ;
  clsInitHiNoKern = ((U+16F00..U+16F01),
                     (U+16F03..U+16F15),
                     (U+16F1E..U+16F1F),
                     (U+16F2C..U+16F2E),
                     (U+16F2F..U+16F3C), U+16F3F,
                     (U+16F42..U+16F44))
    { AspHiS = point(bb.right+90m, bb.bottom+700m) } ;

  clsInitLoMajKern = ((U+16F07..U+16F0D), U+16F21,
                       U+16F22, U+16F37, U+16F38,
                       U+16F43, U+16F44)
    { AspLoMajS = point(bb.right-80m, bb.bottom-50m) } ;
  clsInitLoMinKern = (U+16F20, U+16F33, U+16F34, U+16F3C)
    { AspLoMinS = point(bb.right+10m, bb.bottom-50m) } ;
  clsInitLoNoKern = ((U+16F00..U+16F06),
                     (U+16F0E..U+16F1F),
                     (U+16F23..U+16F32), U+16F35, U+16F36,
                     (U+16F39..U+16F3B),
                     (U+16F3D..U+16F42))
    { AspLoS = point(bb.right+90m, bb.bottom-50m) } ;

  clsFina = (U+16F54..U+16F7E);
  clsFinaRight = (U+16F54..U+16F7E);
  clsFinaTopRight = (U+16F54..U+16F7E);
  gA = (U+16F54); // height 59m compared to standard height 219m

/* finals in PUA compressed on y-axis for positioning above or below the initial: "norm" height 200m or 230m, bottom join; "top" height 230m, top join; "desc" height 278m, top join */
  clsFinaYcmpNorm = ((U+EC54..U+EC62),
                     (U+EC65..U+EC67),
                     (U+EC6A..U+EC7E))
    { NormM = point(bb.width/2, bb.bottom) ;
      NormL = point(bb.right+30m, bb.bottom) ;
      NormR = point(bb.left-30m, bb.bottom) ;
      NormTopL = point(bb.right+30m, bb.top) ;
      NormTopR = point(bb.left-30m, bb.top) } ;

  clsFinaYcmpTop = (U+EC68, U+EC69)
    { TopM = point(bb.width/2, bb.top) ;
      TopL = point(bb.right+30m, bb.top) ;
      TopR = point(bb.left-30m, bb.top) } ;

  clsFinaYcmpDesc = (U+EC63, U+EC64)
    { DescM = point(bb.width/2, bb.top) ;
      DescL = point(bb.right-40m, bb.top) ;
      DescR = point(bb.left-30m, bb.top) } ;

  clsFinaYcmp = (U+EC54..U+EC7E);

  clsTone = (U+16F93..U+16F9F);
  clsAsp = (U+16F51..U+16F53);
  clsAspHi = (U+16F51, U+16F52)
    { AspHiM = point(bb.left, bb.top) } ;
  clsAspLo = U+16F53
    { AspLoM = point(bb.left, bb.bottom) } ;
  gNasal = U+16F50;
  
  clsPosMark = (U+16F8F..U+16F92);
  gRight     = U+EC8F;
  gTopRight  = U+EC90;
  gAbove     = U+EC91;
  gBelow     = U+EC92;
  clsPos     = (gRight, gTopRight, gAbove, gBelow);

/*gNull = U+0000;
  gTab = U+0009;
  gLF = U+000A;
  gCR = U+000D;
  gCRLF = U+0085; */
  gSpace = U+0020;
  clsPnct = (gSpace, (U+0021..U+002F), (U+003A..U+003F));

/* classes for stylistic sets with Latin glyphs, irrelevant for Miao */
  clsLower = postscript("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "agrave", "aacute", "acircumflex","atilde", "adieresis", "amacron","abreve", "aring", "uni01CE", "uni1EA1","uni1EA3", "uni1EA5", "uni1EA7", "uni1EA9","uni1EAB", "uni1EAD", "uni1EAF", "uni1EB1","uni1EB3", "uni1EB5", "uni1EB7", "aogonek","ae", "uni0180", "uni1E07", "ccedilla","cacute", "ccircumflex", "ccaron","cdotaccent", "dcaron", "uni1E0D", "uni1E0F","dcroat", "egrave", "eacute", "ecircumflex","ecaron", "edieresis", "emacron","ebreve", "edotaccent", "uni1EB9", "uni1EBB", "uni1EBD", "uni1EBF", "uni1EC1", "uni1EC3","uni1EC5", "uni1EC7", "eogonek", "uni1E17","gcircumflex", "gbreve", "gdotaccent","uni0123", "gcaron", "uni1E21","uni00670303", "hcircumflex", "uni1E25","uni1E2B", "hbar", "igrave", "iacute","icircumflex", "itilde", "idieresis", "imacron", "i.trk", "uni01D0", "uni1EC9","uni1ECB", "iogonek", "uni012D","jcircumflex", "uni0137", "uni1E35", "lacute", "lcaron", "uni013C", "ldot", "uni1E37","uni1E39", "uni1E3B", "lslash", "uni1E43","nacute", "ncaron", "ntilde", "uni0146","uni1E45", "uni1E47", "uni1E49", "ograve","oacute", "ocircumflex", "otilde", "odieresis", "omacron", "ohungarumlaut", "uni01D1","uni1ECD", "uni1ECF", "uni1ED1", "uni1ED3","uni1ED5", "uni1ED7", "uni1ED9", "oslash","oe", "ohorn", "uni1EDB", "uni1EDD","uni1EDF", "uni1EE1", "uni1EE3", "uni01EB","uni014F", "uni1E53", "racute", "rcaron","uni0157", "uni1E5B", "uni1E5D", "uni1E5F","sacute", "scircumflex", "scaron", "uni015F", "uni0218", "uni1E61", "uni1E63","germandbls", "germandbls", "tcaron", "uni0163", "uni021B", "uni1E6D", "uni1E6F", "ugrave","uacute", "ucircumflex", "utilde", "udieresis", "umacron", "ubreve", "uring","uhungarumlaut", "uni01D4", "uni01D6","uni01D8", "uni01DA", "uni01DC", "uni1EE5","uni1EE7", "uogonek", "uhorn", "uni1EE9","uni1EEB", "uni1EED", "uni1EEF", "uni1EF1","wgrave", "wacute", "wcircumflex","wdieresis", "ygrave", "yacute","ycircumflex", "ydieresis", "uni1E8F","uni1EF5", "uni1EF7", "uni1EF9", "zacute","zcaron", "zdotaccent", "uni1E93", "eth","thorn", "uni0259");
  clsUpper = postscript("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Agrave", "Aacute", "Acircumflex","Atilde", "Adieresis", "Amacron","Abreve", "Aring", "uni01CD", "uni1EA0","uni1EA2", "uni1EA4", "uni1EA6", "uni1EA8","uni1EAA", "uni1EAC", "uni1EAE", "uni1EB0","uni1EB2", "uni1EB4", "uni1EB6", "Aogonek","AE", "uni0243", "uni1E06", "Ccedilla","Cacute", "Ccircumflex", "Ccaron","Cdotaccent", "Dcaron", "uni1E0C", "uni1E0E","Dcroat", "Egrave", "Eacute", "Ecircumflex","Ecaron", "Edieresis", "Emacron","Ebreve", "Edotaccent", "uni1EB8", "uni1EBA", "uni1EBC", "uni1EBE", "uni1EC0", "uni1EC2","uni1EC4", "uni1EC6", "Eogonek", "uni1E16","Gcircumflex", "Gbreve", "Gdotaccent","uni0122", "Gcaron", "uni1E20","uni00470303", "Hcircumflex", "uni1E24","uni1E2A", "Hbar", "Igrave", "Iacute","Icircumflex", "Itilde", "Idieresis", "Imacron", "Idotaccent", "uni01CF", "uni1EC8","uni1ECA", "Iogonek", "uni012C","Jcircumflex", "uni0136", "uni1E34", "Lacute", "Lcaron", "uni013B", "Ldot", "uni1E36","uni1E38", "uni1E3A", "Lslash", "uni1E42","Nacute", "Ncaron", "Ntilde", "uni0145","uni1E44", "uni1E46", "uni1E48", "Ograve","Oacute", "Ocircumflex", "Otilde", "Odieresis", "Omacron", "Ohungarumlaut", "uni01D1","uni1ECC", "uni1ECE", "uni1ED0", "uni1ED2","uni1ED4", "uni1ED6", "uni1ED8", "Oslash","OE", "Ohorn", "uni1EDA", "uni1EDC","uni1EDE", "uni1EE0", "uni1EE2", "uni01EA","uni014E", "uni1E52", "Racute", "Rcaron","uni0156", "uni1E5A", "uni1E5C", "uni1E5E","Sacute", "Scircumflex", "Scaron", "uni015E", "uni0218", "uni1E60", "uni1E62","germandbls", "uni1E9E", "Tcaron", "uni0162", "uni021A", "uni1E6C", "uni1E6E", "Ugrave","Uacute", "Ucircumflex", "Utilde", "Udieresis", "Umacron", "Ubreve", "Uring","Uhungarumlaut", "uni01D3", "uni01D5","uni01D7", "uni01D9", "uni01DB", "uni1EE4","uni1EE6", "Uogonek", "Uhorn", "uni1EE8","uni1EEA", "uni1EEC", "uni1EEE", "uni1EF0","Wgrave", "Wacute", "Wcircumflex","Wdieresis", "Ygrave", "Yacute","Ycircumflex", "Ydieresis", "uni1E8E","uni1EF4", "uni1EF6", "uni1EF8", "Zacute","Zcaron", "Zdotaccent", "uni1E92", "Eth","Thorn", "uni018F");
  clsSC = postscript("A.sc", "B.sc", "C.sc", "D.sc", "E.sc", "F.sc", "G.sc", "H.sc", "I.sc", "J.sc", "K.sc", "L.sc", "M.sc", "N.sc", "O.sc", "P.sc", "Q.sc", "R.sc", "S.sc", "T.sc", "U.sc", "V.sc", "W.sc", "X.sc", "Y.sc", "Z.sc", "Agrave.sc", "Aacute.sc", "Acircumflex.sc","Atilde.sc", "Adieresis.sc", "Amacron.sc","Abreve.sc", "Aring.sc", "uni01CD.sc", "uni1EA0.sc","uni1EA2.sc", "uni1EA4.sc", "uni1EA6.sc", "uni1EA8.sc","uni1EAA.sc", "uni1EAC.sc", "uni1EAE.sc", "uni1EB0.sc","uni1EB2.sc", "uni1EB4.sc", "uni1EB6.sc", "Aogonek.sc","AE.sc", "uni0243.sc", "uni1E06.sc", "Ccedilla.sc","Cacute.sc", "Ccircumflex.sc", "Ccaron.sc","Cdotaccent.sc", "Dcaron.sc", "uni1E0C.sc", "uni1E0E.sc","Dcroat.sc", "Egrave.sc", "Eacute.sc", "Ecircumflex.sc","Ecaron.sc", "Edieresis.sc", "Emacron.sc","Ebreve.sc", "Edotaccent.sc", "uni1EB8.sc", "uni1EBA.sc", "uni1EBC.sc", "uni1EBE.sc", "uni1EC0.sc", "uni1EC2.sc","uni1EC4.sc", "uni1EC6.sc", "Eogonek.sc", "uni1E16.sc","Gcircumflex.sc", "Gbreve.sc", "Gdotaccent.sc","uni0122.sc", "Gcaron.sc", "uni1E20.sc","uni00470303.sc", "Hcircumflex.sc", "uni1E24.sc","uni1E2A.sc", "Hbar.sc", "Igrave.sc", "Iacute.sc","Icircumflex.sc", "Itilde.sc", "Idieresis.sc", "Imacron.sc", "Idotaccent.sc", "uni01CF.sc", "uni1EC8.sc","uni1ECA.sc", "Iogonek.sc", "uni012C.sc","Jcircumflex.sc", "uni0136.sc", "uni1E34.sc", "Lacute.sc", "Lcaron.sc", "uni013B.sc", "Ldot.sc", "uni1E36.sc","uni1E38.sc", "uni1E3A.sc", "Lslash.sc", "uni1E42.sc","Nacute.sc", "Ncaron.sc", "Ntilde.sc", "uni0145.sc","uni1E44.sc", "uni1E46.sc", "uni1E48.sc", "Ograve.sc","Oacute.sc", "Ocircumflex.sc", "Otilde.sc", "Odieresis.sc", "Omacron.sc", "Ohungarumlaut.sc", "uni01D1.sc","uni1ECC.sc", "uni1ECE.sc", "uni1ED0.sc", "uni1ED2.sc","uni1ED4.sc", "uni1ED6.sc", "uni1ED8.sc", "Oslash.sc","OE.sc", "Ohorn.sc", "uni1EDA.sc", "uni1EDC.sc","uni1EDE.sc", "uni1EE0.sc", "uni1EE2.sc", "uni01EA.sc","uni014E.sc", "uni1E52.sc", "Racute.sc", "Rcaron.sc","uni0156.sc", "uni1E5A.sc", "uni1E5C.sc", "uni1E5E.sc","Sacute.sc", "Scircumflex.sc", "Scaron.sc", "uni015E.sc", "uni0218.sc", "uni1E60.sc", "uni1E62.sc","germandbls.sc", "uni1E9E.sc", "Tcaron.sc", "uni0162.sc", "uni021A.sc", "uni1E6C.sc", "uni1E6E.sc", "Ugrave.sc","Uacute.sc", "Ucircumflex.sc", "Utilde.sc", "Udieresis.sc", "Umacron.sc", "Ubreve.sc", "Uring.sc","Uhungarumlaut.sc", "uni01D3.sc", "uni01D5.sc","uni01D7.sc", "uni01D9.sc", "uni01DB.sc", "uni1EE4.sc","uni1EE6.sc", "Uogonek.sc", "Uhorn.sc", "uni1EE8.sc","uni1EEA.sc", "uni1EEC.sc", "uni1EEE.sc", "uni1EF0.sc","Wgrave.sc", "Wacute.sc", "Wcircumflex.sc","Wdieresis.sc", "Ygrave.sc", "Yacute.sc","Ycircumflex.sc", "Ydieresis.sc", "uni1E8E.sc","uni1EF4.sc", "uni1EF6.sc", "uni1EF8.sc", "Zacute.sc","Zcaron.sc", "Zdotaccent.sc", "uni1E92.sc", "Eth.sc","Thorn.sc", "uni018F.sc");
  clsLnum = postscript("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine");
  clsOnum = postscript("zero.onum", "one.onum", "two.onum", "three.onum", "four.onum", "five.onum", "six.onum", "seven.onum", "eight.onum", "nine.onum");
  clsSCnum = postscript("zero.sc", "one.sc", "two.sc", "three.sc", "four.sc", "five.sc", "six.sc","seven.sc", "eight.sc", "nine.sc");
  clsUpperPnct = postscript ("ampersand", "hyphen", "endash","emdash");
  clsSCPnct = postscript("ampersand.sc", "hyphen.sc", "endash.sc","emdash.sc");
endtable;

/* features for Latin; this table is irrelevant for Miao*/
table(feature)
  smcp {
    id = "smcp";
    name.LG_USENG = string("Small caps");
  }
  c2sc {
    id = "c2sc";
    name.LG_USENG = string("All small caps");
  }
  onum {
    id = "onum";
    name.LG_USENG = string("Oldstyle figures");
  }
endtable;

table(sub)
 pass(1)
  _ clsInit clsAsp gNasal > gNasal:4 @2 @3 _ ; // reorder nasalization marker to come before syllable initial if there is an intervening aspiration mark (technically a typing error but rule included just in case)
  clsPosMark > clsPos / clsFina _ ; // turn position marker into its corresponding zero-width blank glyph when after a final
  clsFina > clsFinaRight / _ clsFina? clsFina? clsFina? clsFina? clsFina? gRight ;
  clsFina > clsFinaTopRight / _ clsFina? clsFina? clsFina? clsFina? clsFina? gTopRight ;

/* features for Latin, irrelevant for Miao */
  if (smcp)
    clsLower > clsSC ;
  endif;
  if (c2sc)
    clsLower > clsSC ;
    clsUpper > clsSC ;
    clsLnum > clsSCnum ;
    clsUpperPnct > clsSCPnct ;
  endif;
  if (onum)
    clsLnum > clsOnum ;
  endif;
 endpass;

 pass(2)
  clsInit gNasal > @2 @1 ; // reorder nasalization marker to come before syllable initial (for correct typing order, should ignore output of the corresponding "typo" rule in pass(1))
  clsFina > clsFinaYcmp / _ clsFina? clsFina? gAbove ; // turn final into corresponding y-axis compressed glyph when about to be positioned above initial
  clsFina > clsFinaYcmp / _ clsFina? clsFina? gBelow ; // turn final into corresponding y-axis compressed glyph when about to be positioned below initial
 endpass;
endtable;

table(pos) { MUnits = 1000 }
 pass(1)
/* attach aspiration mark to initial; shouldn't require context section as nasal marker is reordered before this */
  clsInitHiMajKern clsAspHi {attach {to=@1; at=AspHiMajS; with=AspHiM; level = 1}} ;
  clsInitHiMinKern clsAspHi {attach {to=@1; at=AspHiMinS; with=AspHiM; level = 1}} ;
  clsInitHiNoKern  clsAspHi {attach {to=@1; at=AspHiS; with=AspHiM; level = 1}} ;
  clsInitLoMajKern clsAspLo {attach {to=@1; at=AspLoMajS; with=AspLoM; level = 1}} ;
  clsInitLoMinKern clsAspLo {attach {to=@1; at=AspLoMinS; with=AspLoM; level = 1}} ;
  clsInitLoNoKern  clsAspLo {attach {to=@1; at=AspLoS; with=AspLoM; level = 1}} ;
 endpass; // pass1

 pass(2)
/* should only operate if there are two finals together moving TONE ABOVE position */
  clsInit clsFinaYcmpDesc {attach {to=@1; at=aboveDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gAbove ;
  clsFinaYcmpDesc clsFinaYcmpDesc {attach {to=@1; at=DescL; with=DescR; level = 3}}
    /  _ ^ _ gAbove ; // two "descender" finals together, above

  clsInit clsFinaYcmpTop {attach {to=@1; at=aboveTopS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gAbove ;
  clsFinaYcmpTop clsFinaYcmpTop {attach {to=@1; at=TopL; with=TopR; level = 3}}
    /  _ ^ _ gAbove ; // two "top" finals together, above

  clsInit clsFinaYcmpNorm {attach {to=@1; at=aboveNormS; with=NormL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gAbove ;
  clsFinaYcmpNorm clsFinaYcmpNorm {attach {to=@1; at=NormL; with=NormR; level = 3}}
    /  _ ^ _ gAbove ; // two "norm" finals together, above

  clsInit clsFinaYcmpDesc {attach {to=@1; at=aboveDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gAbove ;
  clsFinaYcmpDesc clsFinaYcmpTop {attach {to=@1; at=DescL; with=TopR; level = 3}}
    /  _ ^ _ gAbove ; // a "descender" with a "top", above

  clsInit clsFinaYcmpTop {attach {to=@1; at=aboveDescS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gAbove ;
  clsFinaYcmpTop clsFinaYcmpDesc {attach {to=@1; at=TopL; with=DescR; level = 3}}
    /  _ ^ _ gAbove ; // a "top" with a "descender", above

  clsInit clsFinaYcmpDesc {attach {to=@1; at=aboveDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gAbove ;
  clsFinaYcmpDesc clsFinaYcmpNorm {attach {to=@1; at=DescL; with=NormTopR; level = 3}}
    /  _ ^ _ gAbove ; // a "descender" with a "norm", above

  clsInit clsFinaYcmpNorm {attach {to=@1; at=aboveDescS; with=NormTopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gAbove ;
  clsFinaYcmpNorm clsFinaYcmpDesc {attach {to=@1; at=NormTopL; with=DescR; level = 3}}
    /  _ ^ _ gAbove ; // a "norm" with a "descender", above

  clsInit clsFinaYcmpTop {attach {to=@1; at=aboveTopS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gAbove ;
  clsFinaYcmpTop clsFinaYcmpNorm {attach {to=@1; at=TopL; with=NormTopR; level = 3}}
    /  _ ^ _ gAbove ; // a "top" with a "norm", above

  clsInit clsFinaYcmpNorm {attach {to=@1; at=aboveTopS; with=NormTopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gAbove ;
  clsFinaYcmpNorm clsFinaYcmpTop {attach {to=@1; at=NormTopL; with=TopR; level = 3}}
    /  _ ^ _ gAbove ; // a "norm" with a "top", above

/* should only operate if there are two finals together moving TONE BELOW position */

  clsInit clsFinaYcmpDesc {attach {to=@1; at=belowDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gBelow ;
  clsFinaYcmpDesc clsFinaYcmpDesc {attach {to=@1; at=DescL; with=DescR; level = 3}}
    /  _ ^ _ gBelow ; // two "descender" finals together, below

  clsInit clsFinaYcmpTop {attach {to=@1; at=belowTopS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gBelow ;
  clsFinaYcmpTop clsFinaYcmpTop {attach {to=@1; at=TopL; with=TopR; level = 3}}
    /  _ ^ _ gBelow ; // two "top" finals together, below

  clsInit clsFinaYcmpNorm {attach {to=@1; at=belowNormS; with=NormL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gBelow ;
  clsFinaYcmpNorm clsFinaYcmpNorm {attach {to=@1; at=NormL; with=NormR; level = 3}}
    /  _ ^ _ gBelow ; // two "norm" finals together, below

  clsInit clsFinaYcmpDesc {attach {to=@1; at=belowDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gBelow ;
  clsFinaYcmpDesc clsFinaYcmpTop {attach {to=@1; at=DescL; with=TopR; level = 3}}
    /  _ ^ _ gBelow ; // a "descender" with a "top", below

  clsInit clsFinaYcmpTop {attach {to=@1; at=belowDescS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gBelow ;
  clsFinaYcmpTop clsFinaYcmpDesc {attach {to=@1; at=TopL; with=DescR; level = 3}}
    /  _ ^ _ gBelow ; // a "top" with a "descender", below

  clsInit clsFinaYcmpDesc {attach {to=@1; at=belowDescS; with=DescL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gBelow ;
  clsFinaYcmpDesc clsFinaYcmpNorm {attach {to=@1; at=DescL; with=NormTopR; level = 3}}
    /  _ ^ _ gBelow ; // a "descender" with a "norm", below

  clsInit clsFinaYcmpNorm {attach {to=@1; at=belowDescS; with=NormTopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpDesc gBelow ;
  clsFinaYcmpNorm clsFinaYcmpDesc {attach {to=@1; at=NormTopL; with=DescR; level = 3}}
    /  _ ^ _ gBelow ; // a "norm" with a "descender", below

  clsInit clsFinaYcmpTop {attach {to=@1; at=belowTopS; with=TopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpNorm gBelow ;
  clsFinaYcmpTop clsFinaYcmpNorm {attach {to=@1; at=TopL; with=NormTopR; level = 3}}
    /  _ ^ _ gBelow ; // a "top" with a "norm", below

  clsInit clsFinaYcmpNorm {attach {to=@1; at=belowTopS; with=NormTopL; level = 2}}
    /  _ clsAsp? ^ _ clsFinaYcmpTop gBelow ;
  clsFinaYcmpNorm clsFinaYcmpTop {attach {to=@1; at=NormTopL; with=TopR; level = 3}}
    /  _ ^ _ gBelow ; // a "norm" with a "top", below

/* place final above initial if it is alone*/
  clsInit clsFinaYcmpNorm {attach {to=@1; at=aboveNormS; with=NormM; level = 2}}
    /  _ clsAsp? _ gAbove ;
  clsInit clsFinaYcmpTop {attach {to=@1; at=aboveTopS; with=TopM; level = 2}}
    /  _ clsAsp? _ gAbove ;
  clsInit clsFinaYcmpDesc {attach {to=@1; at=aboveDescS; with=DescM; level = 2}}
    /  _ clsAsp? _ gAbove ;

/* place final below initial if it is alone */
  clsInit clsFinaYcmpNorm {attach {to=@1; at=belowNormS; with=NormM; level = 2}}
    /  _ clsAsp? _ gBelow ;
  clsInit clsFinaYcmpTop {attach {to=@1; at=belowTopS; with=TopM; level = 2}}
    /  _ clsAsp? _ gBelow ;
  clsInit clsFinaYcmpDesc {attach {to=@1; at=belowDescS; with=DescM; level = 2}}
    /  _ clsAsp? _ gBelow ;

/* shift final(s) up to "tone right" position (1/3 of cap height) or "tone top right" position (2/3 of cap height) */
  clsFinaRight {shift.y = 219m} / _ clsFina? clsFina? clsFina? clsFina? clsFina? gRight ;
  clsFinaTopRight {shift.y = 438m} / _ clsFina? clsFina? clsFina? clsFina? clsFina? gTopRight ;

/* kern baseline finals when there is no low aspiration mark without also kerning them at topright position */
  clsFina {kern.x = -140m} / clsInitLoMajKern _ ;
  clsFina {kern.x =  -40m} / clsInitLoMinKern _ ;
  clsFina {kern.x = -220m} / clsInitLoMajKern clsAspHi _ ;
  clsFina {kern.x = -120m} / clsInitLoMinKern clsAspHi _ ;
endpass; // pass2

 pass(3)
/* kern topright finals when there is no high aspiration mark*/
  clsFinaTopRight {kern.x = -140m} / clsInitHiMajKern _ clsFina? clsFina? clsFina? gTopRight ;
  clsFinaTopRight {kern.x =  -90m} / clsInitHiMinKern _ clsFina? clsFina? clsFina? gTopRight ;
  clsFinaTopRight {kern.x = -220m} / clsInitHiMajKern clsAspLo _ clsFina? clsFina? clsFina? gTopRight ;
  clsFinaTopRight {kern.x = -170m} / clsInitHiMinKern clsAspLo _ clsFina? clsFina? clsFina? gTopRight ;
 endpass; //pass3

 pass(4)
/* shift the "a" vowel up an extra notch for right and topright */
  gA {shift.y = 219m+80m} / _ clsFina? clsFina? clsFina? clsFina? clsFina? gRight ;
  gA {shift.y = 438m+160m} / _ clsFina? clsFina? clsFina? clsFina? clsFina? gTopRight ;
 endpass; //pass4
endtable;





